# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Book {
  id: ID!
  name: String
  author: String
  link: String
  saints(
    where: SaintWhereInput! = {}
    orderBy: [SaintOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Saint!]
  saintsCount(where: SaintWhereInput! = {}): Int
}

input BookWhereUniqueInput {
  id: ID
}

input BookWhereInput {
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
  id: IDFilter
  name: StringFilter
  author: StringFilter
  link: StringFilter
  saints: SaintManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SaintManyRelationFilter {
  every: SaintWhereInput
  some: SaintWhereInput
  none: SaintWhereInput
}

input BookOrderByInput {
  id: OrderDirection
  name: OrderDirection
  author: OrderDirection
  link: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input BookUpdateInput {
  name: String
  author: String
  link: String
  saints: SaintRelateToManyForUpdateInput
}

input SaintRelateToManyForUpdateInput {
  disconnect: [SaintWhereUniqueInput!]
  set: [SaintWhereUniqueInput!]
  create: [SaintCreateInput!]
  connect: [SaintWhereUniqueInput!]
}

input BookUpdateArgs {
  where: BookWhereUniqueInput!
  data: BookUpdateInput!
}

input BookCreateInput {
  name: String
  author: String
  link: String
  saints: SaintRelateToManyForCreateInput
}

input SaintRelateToManyForCreateInput {
  create: [SaintCreateInput!]
  connect: [SaintWhereUniqueInput!]
}

type Church {
  id: ID!
  name: String
  location: String
  bio: String
  patronSaint(
    where: SaintWhereInput! = {}
    orderBy: [SaintOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Saint!]
  patronSaintCount(where: SaintWhereInput! = {}): Int
  relics(
    where: SaintWhereInput! = {}
    orderBy: [SaintOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Saint!]
  relicsCount(where: SaintWhereInput! = {}): Int
}

input ChurchWhereUniqueInput {
  id: ID
}

input ChurchWhereInput {
  AND: [ChurchWhereInput!]
  OR: [ChurchWhereInput!]
  NOT: [ChurchWhereInput!]
  id: IDFilter
  name: StringFilter
  location: StringFilter
  bio: StringFilter
  patronSaint: SaintManyRelationFilter
  relics: SaintManyRelationFilter
}

input ChurchOrderByInput {
  id: OrderDirection
  name: OrderDirection
  location: OrderDirection
  bio: OrderDirection
}

input ChurchUpdateInput {
  name: String
  location: String
  bio: String
  patronSaint: SaintRelateToManyForUpdateInput
  relics: SaintRelateToManyForUpdateInput
}

input ChurchUpdateArgs {
  where: ChurchWhereUniqueInput!
  data: ChurchUpdateInput!
}

input ChurchCreateInput {
  name: String
  location: String
  bio: String
  patronSaint: SaintRelateToManyForCreateInput
  relics: SaintRelateToManyForCreateInput
}

type Saint {
  id: ID!
  name: String
  book(
    where: BookWhereInput! = {}
    orderBy: [BookOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Book!]
  bookCount(where: BookWhereInput! = {}): Int
  Church(
    where: ChurchWhereInput! = {}
    orderBy: [ChurchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Church!]
  ChurchCount(where: ChurchWhereInput! = {}): Int
  RelicsLocation(
    where: ChurchWhereInput! = {}
    orderBy: [ChurchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Church!]
  RelicsLocationCount(where: ChurchWhereInput! = {}): Int
  RelicHistory: Saint_RelicHistory_Document
  Troparion: Saint_Troparion_Document
  Kontakion: Saint_Kontakion_Document
  Bio: Saint_Bio_Document
  patronOf: String
  publishedAt: DateTime
  author: User
  status: String
}

type Saint_RelicHistory_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Saint_Troparion_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Saint_Kontakion_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Saint_Bio_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SaintWhereUniqueInput {
  id: ID
}

input SaintWhereInput {
  AND: [SaintWhereInput!]
  OR: [SaintWhereInput!]
  NOT: [SaintWhereInput!]
  id: IDFilter
  name: StringFilter
  book: BookManyRelationFilter
  Church: ChurchManyRelationFilter
  RelicsLocation: ChurchManyRelationFilter
  patronOf: StringFilter
  publishedAt: DateTimeNullableFilter
  author: UserWhereInput
  status: StringNullableFilter
}

input BookManyRelationFilter {
  every: BookWhereInput
  some: BookWhereInput
  none: BookWhereInput
}

input ChurchManyRelationFilter {
  every: ChurchWhereInput
  some: ChurchWhereInput
  none: ChurchWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input SaintOrderByInput {
  id: OrderDirection
  name: OrderDirection
  patronOf: OrderDirection
  publishedAt: OrderDirection
  status: OrderDirection
}

input SaintUpdateInput {
  name: String
  book: BookRelateToManyForUpdateInput
  Church: ChurchRelateToManyForUpdateInput
  RelicsLocation: ChurchRelateToManyForUpdateInput
  RelicHistory: JSON
  Troparion: JSON
  Kontakion: JSON
  Bio: JSON
  patronOf: String
  publishedAt: DateTime
  author: UserRelateToOneForUpdateInput
  status: String
}

input BookRelateToManyForUpdateInput {
  disconnect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

input ChurchRelateToManyForUpdateInput {
  disconnect: [ChurchWhereUniqueInput!]
  set: [ChurchWhereUniqueInput!]
  create: [ChurchCreateInput!]
  connect: [ChurchWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SaintUpdateArgs {
  where: SaintWhereUniqueInput!
  data: SaintUpdateInput!
}

input SaintCreateInput {
  name: String
  book: BookRelateToManyForCreateInput
  Church: ChurchRelateToManyForCreateInput
  RelicsLocation: ChurchRelateToManyForCreateInput
  RelicHistory: JSON
  Troparion: JSON
  Kontakion: JSON
  Bio: JSON
  patronOf: String
  publishedAt: DateTime
  author: UserRelateToOneForCreateInput
  status: String
}

input BookRelateToManyForCreateInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

input ChurchRelateToManyForCreateInput {
  create: [ChurchCreateInput!]
  connect: [ChurchWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  saints(
    where: SaintWhereInput! = {}
    orderBy: [SaintOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Saint!]
  saintsCount(where: SaintWhereInput! = {}): Int
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  saints: SaintManyRelationFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  saints: SaintRelateToManyForUpdateInput
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  saints: SaintRelateToManyForCreateInput
}

type Image {
  id: ID!
  image: CloudinaryImage_File
  altText: String
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  image: Upload
  altText: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: Upload
  altText: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createBook(data: BookCreateInput!): Book
  createBooks(data: [BookCreateInput!]!): [Book]
  updateBook(where: BookWhereUniqueInput!, data: BookUpdateInput!): Book
  updateBooks(data: [BookUpdateArgs!]!): [Book]
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteBooks(where: [BookWhereUniqueInput!]!): [Book]
  createChurch(data: ChurchCreateInput!): Church
  createChurches(data: [ChurchCreateInput!]!): [Church]
  updateChurch(where: ChurchWhereUniqueInput!, data: ChurchUpdateInput!): Church
  updateChurches(data: [ChurchUpdateArgs!]!): [Church]
  deleteChurch(where: ChurchWhereUniqueInput!): Church
  deleteChurches(where: [ChurchWhereUniqueInput!]!): [Church]
  createSaint(data: SaintCreateInput!): Saint
  createSaints(data: [SaintCreateInput!]!): [Saint]
  updateSaint(where: SaintWhereUniqueInput!, data: SaintUpdateInput!): Saint
  updateSaints(data: [SaintUpdateArgs!]!): [Saint]
  deleteSaint(where: SaintWhereUniqueInput!): Saint
  deleteSaints(where: [SaintWhereUniqueInput!]!): [Saint]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
}

type Query {
  books(
    where: BookWhereInput! = {}
    orderBy: [BookOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Book!]
  book(where: BookWhereUniqueInput!): Book
  booksCount(where: BookWhereInput! = {}): Int
  churches(
    where: ChurchWhereInput! = {}
    orderBy: [ChurchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Church!]
  church(where: ChurchWhereUniqueInput!): Church
  churchesCount(where: ChurchWhereInput! = {}): Int
  saints(
    where: SaintWhereInput! = {}
    orderBy: [SaintOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Saint!]
  saint(where: SaintWhereUniqueInput!): Saint
  saintsCount(where: SaintWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
